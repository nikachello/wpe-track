generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Driver {
  id                    String              @id @default(cuid())
  name                  String
  lastName              String
  phoneNumber           String?
  assignableToCompanies AssignableDrivers[]
  companies             DriversOnCompany[]

  email String?
  telegramId String?
}

model AssignableDrivers {
  driverId  String
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  driver    Driver  @relation(fields: [driverId], references: [id])

  @@id([driverId, companyId])
}

model Company {
  id              String              @id @default(cuid())
  name            String
  realCompanyId   String              @unique
  possibleDrivers AssignableDrivers[]
  realCompany     RealCompany         @relation(fields: [realCompanyId], references: [id])
  drivers         DriversOnCompany[]
}

model RealCompany {
  id                 String   @id @default(cuid())
  name               String
  phone              String
  email              String
  isInsuranceCompany Boolean  @default(false)
  company            Company?
  loads              Load[]
}

model DriversOnCompany {
  companyId    String
  driverId     String
  spot         Int
  createdAt    DateTime?  @default(now())
  dispatcherId String
  superId      String?
  company      Company    @relation(fields: [companyId], references: [id])
  dispatcher   Dispatcher @relation(fields: [dispatcherId], references: [id])
  driver       Driver     @relation(fields: [driverId], references: [id])

  @@id([companyId, spot])
  @@unique([companyId, driverId])
}

model Dispatcher {
  id             String             @id @default(cuid())
  name           String
  userId         String             @unique
  email          String?
  percentage     String?
  user           User               @relation(fields: [userId], references: [id])
  insuranceLoads DriversOnCompany[]
  loads          Load[]
  drivers        RealDriver[]
}

model RealDriver {
  id           String     @id @default(cuid())
  name         String
  vehicle      String
  phoneNumber  String
  dispatcherId String
  trailerSize  String?
  percentage   String?
  loads        Load[]
  dispatcher   Dispatcher @relation(fields: [dispatcherId], references: [id])
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  name          String?
  userType      UserType    @default(DISPATCHER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  emailVerified Boolean
  image         String?
  Dispatcher    Dispatcher?
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Load {
  id                String      @id @default(uuid())
  paymentType       PaymentType
  dispatcherId      String
  realDriverId      String
  realCompanyId     String
  pickupDate        DateTime?
  deliveryDate      DateTime?
  isPaymentReceived Boolean
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deliveryAddress   String
  pickupAddress     String
  price             String
  vin               String
  superId           String
  isDelivered       Boolean     @default(false)
  dispatcher        Dispatcher  @relation(fields: [dispatcherId], references: [id])
  company           RealCompany @relation(fields: [realCompanyId], references: [id])
  driver            RealDriver  @relation(fields: [realDriverId], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum UserType {
  ADMIN
  DISPATCHER
}

enum PaymentType {
  CASH
  DAYS_2
  DAYS_3
  DAYS_5
  DAYS_15
  DAYS_20
  DAYS_30
  SUPERPAY
}

enum isInsuranceCompany {
  YES @map("კი")
  NO  @map("არა")
}
