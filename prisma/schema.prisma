
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserType {
  ADMIN
  DISPATCHER
}

enum PaymentType {
  CASH
  DAYS_2
  DAYS_3
  DAYS_5
  DAYS_15
  DAYS_20
  DAYS_30
  SUPERPAY
}

enum isInsuranceCompany {
  კი
  არა
}



model Driver {
  id          String             @id @default(cuid())
  name        String
  lastName    String
  phoneNumber String?
  companies   DriversOnCompany[]

  assignableToCompanies AssignableDrivers[]
}

model AssignableDrivers {
  driverId  String
  companyId String
  driver    Driver  @relation(fields: [driverId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])

  @@id([driverId, companyId]) // Composite primary key
}

model Company {
  id             String     @id @default(cuid())
  name           String
  realCompanyId  String     @unique
  realCompany    RealCompany @relation(fields: [realCompanyId], references: [id])
  drivers        DriversOnCompany[]
  possibleDrivers AssignableDrivers[]
}

model RealCompany {
  id               String   @id @default(cuid())
  name             String
  phone            String
  email            String
  isInsuranceCompany Boolean @default(false)
  loads            Load[]
  company          Company?
}



model DriversOnCompany {
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  driver   Driver @relation(fields: [driverId], references: [id])
  driverId String

  spot Int // New field to track driver slots

  createdAt DateTime? @default(now())

  dispatcherId String
  dispatcher Dispatcher? @relation(fields: [dispatcherId], references: [id])

  superId String?


  // Ensures each spot in a company is unique
  // Ensures each driver is assigned only once per company
  @@id([companyId, spot])
  @@unique([companyId, driverId])
}

model Dispatcher {
  id   String @id @default(cuid())
  name String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  loads Load[]

  drivers RealDriver[]

  insuranceLoads DriversOnCompany[]
}

model RealDriver {
  id          String @id @default(cuid())
  name        String
  vehicle     String
  phoneNumber String

  dispatcherId String
  dispatcher Dispatcher @relation(fields: [dispatcherId], references: [id])

  loads Load[]

}

model User {
  id    String  @id @default(uuid())
  email String  @unique
  name  String?

  userType UserType @default(DISPATCHER)

  Dispatcher Dispatcher?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Load {
  id String @id @default(uuid())
  superId String
  paymentType PaymentType
  vin String
  pickupAddress String
  deliveryAddress String
  price String
  

  dispatcherId String
  dispatcher Dispatcher @relation(fields: [dispatcherId], references: [id])

  realDriverId String
  driver RealDriver @relation(fields: [realDriverId], references: [id])

  realCompanyId String
  company RealCompany @relation(fields: [realCompanyId], references: [id])

  pickupDate DateTime?
  deliveryDate DateTime?

  isPaymentReceived Boolean

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
